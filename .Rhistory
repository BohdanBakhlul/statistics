primlist[ab]
max(primlist[ab])
library(schoolmath)
data("primlist")
ab <- primlist<1000
ab
ac <- primlist>100 & primlist<500
length(primlist[ac])
vec1 = c(a, b)
vec2 = c(1, 2, 3)
vec1
vec11 = c(a, b)
vec2 = c(1, 2, 3)
vec11
vec11 = c('a', 'b')
vec2 = c(1, 2, 3)
vec11
vec1 <- c("a","b")
vec2 <- c(1,2,3)
paste(rep(vec1, each = length(vec2)), vec2, sep="-")
vec1 <- c("a","b")
vec2 <- c(1,2,3)
paste(rep(vec1, each = length(vec2)), vec2, sep="")
vec3 <- 1:30
vec4 <- c("X", "Y", "Z")
paste(vec3, vec4, sep=".")
ae <- c('a', 'b','c','d', 'e')
sample(ae, 100, replace= TRUE)
ae <- c('a', 'b','c','d', 'e')
sample(ae, 100, replace= TRUE)
ae <- c('a', 'b','c','d', 'e')
sample(ae, 100, replace= TRUE)
ae <- c('a', 'b','c','d', 'e')
af <- sample(ae, 100, replace= TRUE)
recode(af, "c('a','b') = 1; c('c','d') = 2; 'd' = 3")
install.packages("car")
ae <- c('a', 'b','c','d', 'e')
af <- sample(ae, 100, replace= TRUE)
install.packages("car")
ae <- c('a', 'b','c','d', 'e')
af <- sample(ae, 100, replace= TRUE)
install.packages("carData")
ae <- c('a', 'b','c','d', 'e')
af <- sample(ae, 100, replace= TRUE)
ae <- c('a', 'b','c','d', 'e')
af <- sample(ae, 100, replace= TRUE)
ae <- c('a', 'b','c','d', 'e')
af <- sample(ae, 100, replace= TRUE)
ae <- c('a', 'b','c','d', 'e')
af <- sample(ae, 100, replace= TRUE)
ae <- c('a', 'b','c','d', 'e')
af <- sample(ae, 100, replace= TRUE)
ae <- c('a', 'b','c','d', 'e')
af <- sample(ae, 100, replace= TRUE)
ae <- c('a', 'b','c','d', 'e')
af <- sample(ae, 100, replace= TRUE)
af
install.packages("carData")
install.packages("car")
library(car)
library(carData)
ae <- c('a', 'b','c','d', 'e')
af <- sample(ae, 100, replace= TRUE)
recode(af, "c('a','b') = 1; c('c','d') = 2; 'd' = 3")
ae <- c('a', 'b','c','d', 'e')
af <- sample(ae, 100, replace= TRUE)
recode(af, "c('a','b') = 1; c('c','d') = 2; 'e' = 3")
xx <- c(NA, 3, 14, NA, 33, 17, NA, 41)
XX
xx <- c(NA, 3, 14, NA, 33, 17, NA, 41)
XX
xx <- c(NA, 3, 14, NA, 33, 17, NA, 41)
XX
xx <- c(NA, 3, 14, NA, 33, 17, NA, 41)
xx
xx <- c(NA, 3, 14, NA, 33, 17, NA, 41)
length(is.na(xx))
mean(xx)
replace(xx, NA, 11)
xx
xx <- c(NA, 3, 14, NA, 33, 17, NA, 41)
sum(is.na(xx))
xx <- c(NA, 3, 14, NA, 33, 17, NA, 41)
sum(is.na(xx))
mean(xx, na.rm = TRUE)
xb <- xx[!is.na(xx)]
xb
xx[is.na(xx)] <- 11
xx
myList <- list(c("Bohdan", "Bakhlul"), 3.14, unique(), seq(0, 1, 0.1))
myList
(myList <- list(c("Bohdan", "Bakhlul"), 3.14, unique(), seq(0, 1, 0.1)))
myList
(myList <- list(c("Bohdan", "Bakhlul"), 3.14, unique, seq(0, 1, 0.1)))
myList
(myList <- list(c("Bohdan", "Bakhlul"), 3.14, unique, seq(0, 1, 0.1)))
myList[1] <- NULL
myList[3] <- NULL
myList
(myList <- list(c("Bohdan", "Bakhlul"), 3.14, unique, seq(0, 1, 0.1)))
myList[[1]] <- NULL
myList[[3]] <- NULL
myList
(myList <- list(c("Bohdan", "Bakhlul"), 3.14, unique, seq(0, 1, 0.1)))
(myList <- list(c("Bohdan", "Bakhlul"), 3.14, unique, seq(0, 1, 0.1)))
#myList[[1]] <- NULL
#myList[[3]] <- NULL
myList
myList[[3]] <- NULL
myList[[1]] <- NULL
myList
(Listva <- list(gamma(myList)))
Listva
(Listva <- list(gamma(myList)))
(Listva <- list(c(gamma(myList[[1]]), gamma(myList[[2]]))))
Listva
(Listva <- list(c(gamma(myList[[1]]), gamma(myList[[2]]))))
Listva
(Listva <- list(c(gamma(myList[[1]]), gamma(myList[[2]]))))
Listva[2]
Listva <- c(gamma(myList[[1]]), gamma(myList[[2]]))
Listva
vector1 <- 1:100
sqrvector1 <- vector1^2
sqrvector1
ftable(sqrvector1 %% 10)
numers <- 1:5
outer(numers, numers, '*')
outer(numers, numers, '*', FUN = "paste")
outer(numers, numers, '*')
(matr <- matrix(c(1, 2, 1, 5, 0, 2, 3, 5, 1), nrow = 3, ncol = 3))
rankMatrix(matr)
qr(matr)$rank
qr(matr)$det
det(matr)
rankMatrix(matr)
library(matlib)
library(Matrix)
rankMatrix(matr)
solve(matr)
eigen(matr)
mean(matr)
colMeans(matr)
rowMeans(matr)
colSums(matr)
rowSums(matr)
matr3 <- matr1 * matr2
matr3 <- matr * matr2
matr2 <- solve(matr)
matr3 <- matr * matr2
matr3
install.packages("MASS")
library(MASS)
data("birthwt")
data("birthwt")
birthwt
birthwt[ftw]
birthwt[ftv]
birthwt(ftv)
birthwt[9]
factor(fac)
fac <- birthwt[9]
factor(fac)
fac_factor <- factor(fac)
levels(fac_factor)
g <- levels(fac_factor)
g
fac <- birthwt[, "ftv"]
fac_factor <- factor(fac)
g <- levels(fac_factor)
g
fac <- birthwt[, "ftv"]
fac_factor <- factor(fac)
g <- levels(fac_factor)
fac_factor
g
p <- levels(fac_factor)
p
factor(fac, levels = c("0", "1", "2 or more"))
factor(fac, levels = c("0", "1", "2 or more"), ordered = TRUE)
factor(fac, levels = c("0", "1", ">2"))
data("Cars93")
is.factor(Cars93)
is.factor(unlist(Cars93))
is.factor(Cars93[1])
f <- sapply(Cars93, is.factor)
f
table(Cars93["Origin"], Cars93["Factor"])
table(Cars93[, "Origin"], Cars93[, "Factor"])
install.packages("MASS")
library(MASS)
data("Cars93")
f <- sapply(Cars93, is.factor)
f
table(Cars93[, "Origin"], Cars93[, "Factor"])
data("Cars93")
f <- sapply(Cars93, is.factor)
f
table(Cars93[, "Origin"], Cars93[, "Factor"])
data("Cars93")
f <- sapply(Cars93, is.factor)
f
table(Cars93[, "Origin"], Cars93[, "Factor"])
data("Cars93")
f <- sapply(Cars93, is.factor)
f
data("Cars93")
f <- sapply(Cars93, is.factor)
f
data("Cars93")
f <- sapply(Cars93, is.factor)
f
data("Cars93")
f <- sapply(Cars93, is.factor)
f
data("Cars93")
f <- sapply(Cars93, is.factor)
f
data("Cars93")
f <- sapply(Cars93, is.factor)
f
data("Cars93")
f <- sapply(Cars93, is.factor)
f
data("Cars93")
f <- sapply(Cars93, is.factor)
f
table(Cars93[, "Origin"], Cars93[, "Factor"])
table(Cars93[, "Origin"], Cars93[, "Factor"])
install.packages("MASS")
library(MASS)
data("birthwt")
fac <- birthwt[, "ftv"]
fac_factor <- factor(fac)
fac_factor
p <- levels(fac_factor)
p
factor(fac, levels = c("0", "1", "2 or more"))
install.packages("MASS")
library(MASS)
data("birthwt")
fac <- birthwt[, "ftv"]
fac_factor <- factor(fac)
fac_factor
p <- levels(fac_factor)
p
factor(fac, levels = c("0", "1", "2 or more"))
install.packages("MASS")
library(MASS)
data("birthwt")
fac <- birthwt[, "ftv"]
fac_factor <- factor(fac)
fac_factor
p <- levels(fac_factor)
p
factor(fac, levels = c("0", "1", "2 or more"))
install.packages("MASS")
library(MASS)
data("birthwt")
fac <- birthwt[, "ftv"]
fac_factor <- factor(fac)
fac_factor
p <- levels(fac_factor)
p
factor(fac, levels = c("0", "1", "2 or more"))
install.packages("MASS")
library(MASS)
data("birthwt")
fac <- birthwt[, "ftv"]
fac_factor <- factor(fac)
fac_factor
p <- levels(fac_factor)
p
factor(fac, levels = c("0", "1", "2 or more"))
install.packages("MASS")
library(MASS)
data("birthwt")
fac <- birthwt[, "ftv"]
fac_factor <- factor(fac)
fac_factor
p <- levels(fac_factor)
p
factor(fac, levels = c("0", "1", "2 or more"))
install.packages("MASS")
library(MASS)
data("birthwt")
fac <- birthwt[, "ftv"]
fac_factor <- factor(fac)
fac_factor
p <- levels(fac_factor)
p
factor(fac, levels = c("0", "1", "2 or more"))
install.packages("MASS")
library(MASS)
data("birthwt")
fac <- birthwt[, "ftv"]
fac_factor <- factor(fac)
fac_factor
p <- levels(fac_factor)
p
factor(fac, levels = c("0", "1", "2 or more"))
install.packages("MASS")
library(MASS)
data("birthwt")
fac <- birthwt[, "ftv"]
fac_factor <- factor(fac)
fac_factor
p <- levels(fac_factor)
p
factor(fac, levels = c("0", "1", "2 or more"))
install.packages("MASS")
library(MASS)
data("birthwt")
fac <- birthwt[, "ftv"]
fac_factor <- factor(fac)
fac_factor
p <- levels(fac_factor)
p
factor(fac, levels = c("0", "1", "2 or more"))
install.packages("MASS")
library(MASS)
data("birthwt")
fac <- birthwt[, "ftv"]
fac_factor <- factor(fac)
fac_factor
p <- levels(fac_factor)
p
factor(fac, levels = c("0", "1", "2 or more"))
install.packages("MASS")
install.packages("MASS")
install.packages("MASS")
install.packages("MASS")
install.packages("MASS")
library(MASS)
data("birthwt")
fac <- birthwt[, "ftv"]
fac_factor <- factor(fac)
fac_factor
p <- levels(fac_factor)
p
factor(fac, levels = c("0", "1", "2 or more"))
install.packages("MASS")
library(MASS)
data("birthwt")
fac <- birthwt[, "ftv"]
fac_factor <- factor(fac)
fac_factor
p <- levels(fac_factor)
p
factor(fac, levels = c("0", "1", "2 or more"))
install.packages("MASS")
data("Cars93")
f <- sapply(Cars93, is.factor)
f
table(Cars93[, "Origin"], Cars93[, "Factor"])
data("Cars93")
f <- sapply(Cars93, is.factor)
f
table(Cars93[, "Origin"], Cars93[, "Type"])
data_cancer <- read.csv("j:/Downloads/data_cancer.csv")
View(data_cancer)
even_indexes<-seq(2,98,2)
qr <- data.frame(data_cancer[even_indexes,1])
qr
even_indexes<-seq(2,98,2)
qr <- data.frame(data_cancer[even_indexes,1])
qr
abcd <- read.csv(data_cancer.csv)
abcd
abcd <- read.csv("data_cancer.csv")
abcd
setwd("j:/Desktop/statistics")
load("telephone_exchange.RData")
telephone_exchange
nums <- unlist(telephone_exchange)
unname(nums)
m <- 200
p_est <- mean(nums) / m
p_est
mu_est <- mean(nums)
mu_est
probs <- dbinom(sort(unique(nums)), size = m, prob = p_est)
sum(probs)
counts <- matrix(c(prop.table(table(nums)), probs), nrow = 2, byrow = TRUE)
rownames(counts) <- c("empirical", "theoretical")
colnames(counts) <- sort(unique(num))
counts
barplot(counts,
xlab = "Number of calls", ylab = "Probability",
main = "Empirical and theoretical distributions of number of calls",
col = c("red", "blue"), legend = rownames(counts), beside = TRUE)
sum(probs)
barplot(counts,
xlab = "Number of mistakes", ylab = "Probability",
main = "Empirical and theoretical distributions of number of mistakes",
col = c("red", "blue"), legend = rownames(counts), beside = TRUE)
load("telephone_exchange.RData")
telephone_exchange
nums <- unlist(telephone_exchange)
unname(nums)
m <- 200
(p_est <- mean(nums) / m)
probs <- dbinom(sort(unique(nums)), size = m, prob = p_est)
counts <- matrix(c(prop.table(table(nums)), probs), nrow = 2, byrow = TRUE)
rownames(counts) <- c("empirical", "theoretical")
colnames(counts) <- sort(unique(nums))
counts
barplot(counts,
xlab = "Number of mistakes", ylab = "Probability",
main = "Empirical and theoretical distributions of number of mistakes",
col = c("red", "blue"), legend = rownames(counts), beside = TRUE)
mu_est <- mean(nums)
mu_est
load("telephone_exchange.RData")
telephone_exchange
nums <- unlist(telephone_exchange)
unname(nums)
m <- 200
mu_est <- mean(nums)
mu_est
(p_est <- mean(nums) / m)
probs <- dbinom(sort(unique(nums)), size = m, prob = p_est)
counts <- matrix(c(prop.table(table(nums)), probs), nrow = 2, byrow = TRUE)
rownames(counts) <- c("empirical", "theoretical")
colnames(counts) <- sort(unique(nums))
counts
barplot(counts,
xlab = "Number of mistakes", ylab = "Probability",
main = "Empirical and theoretical distributions of number of mistakes",
col = c("red", "blue"), legend = rownames(counts), beside = TRUE)
qqplot(rbinom(length(nums), size = m, prob = p_est), numbs)
qqline(nums, distribution = function(probs) { qbinom(probs, size = m, prob = p_est) })
qqplot(rbinom(length(nums), size = m, prob = p_est), numbs)
qqline(nums, distribution = function(probs) { qbinom(probs, size = m, prob = p_est) })
qqplot(rbinom(length(nums), size = m, prob = p_est), numbs)
qqline(nums, distribution = function(probs) { qbinom(probs, size = m, prob = p_est) })
qqplot(rbinom(length(nums), size = m, prob = p_est), nums)
qqline(nums, distribution = function(probs) { qbinom(probs, size = m, prob = p_est) })
mean(nums > 18.4)
mean(nums < 4)
(sigma_est <- sd(nums))
1 - pnorm(4, mu_est, sigma_est)
pnorm(4, mu_est, sigma_est)
library(EnvStats)
enorm(nums,
method = "mvue",
ci = TRUE, ci.type = "two-sided", conf.level = 0.95, ci.param = "mean")
library(EnvStats)
install.packages("EnvStats")
library(EnvStats)
enorm(nums,
method = "mvue",
ci = TRUE, ci.type = "two-sided", conf.level = 0.95, ci.param = "mean")
enorm(nums,
method = "mvue",
ci = TRUE, ci.type = "two-sided", conf.level = 1, ci.param = "mean")
enorm(nums,
method = "mvue",
ci = TRUE, ci.type = "two-sided", conf.level = 0.99, ci.param = "mean")
enorm(nums,
method = "mvue",
ci = TRUE, ci.type = "two-sided", conf.level = 0.95, ci.param = "mean")
enorm(nums,
method = "mvue",
ci = TRUE, ci.type = "two-sided", conf.level = 0.96, ci.param = "mean")
enorm(nums,
method = "mvue",
ci = TRUE, ci.type = "two-sided", conf.level = 0.94, ci.param = "mean")
enorm(nums,
method = "mvue",
ci = TRUE, ci.type = "two-sided", conf.level = 0.93, ci.param = "mean")
enorm(nums,
method = "mvue",
ci = TRUE, ci.type = "two-sided", conf.level = 0.95, ci.param = "mean")
enorm(nums,
method = "mvue",
ci = TRUE, ci.type = "two-sided", conf.level = 0.96, ci.param = "mean")
enorm(nums,
method = "mvue",
ci = TRUE, ci.type = "two-sided", conf.level = 0.97, ci.param = "mean")
enorm(nums,
method = "mvue",
ci = TRUE, ci.type = "two-sided", conf.level = 0.95, ci.param = "variance")
enorm(nums,
method = "mvue",
ci = TRUE, ci.type = "lower", conf.level = 0.95, ci.param = "mean")
enorm(nums,
method = "mvue",
ci = TRUE, ci.type = "upper", conf.level = 0.95, ci.param = "mean")
enorm(nums,
method = "mle",
ci = TRUE, ci.type = "two-sided", conf.level = 0.95, ci.param = "mean")
enorm(nums,
method = "mme",
ci = TRUE, ci.type = "two-sided", conf.level = 0.95, ci.param = "mean")
enorm(nums,
method = "mme",
ci = TRUE, ci.type = "two-sided", conf.level = 0.95, ci.param = "mean")
enorm(nums,
method = "mme",
ci = TRUE, ci.type = "two-sided", conf.level = 0.95, ci.param = "mean")
setwd("j:/Desktop/statistics")
failures <- read.table("failures.txt")
failures
failures$V1
failures <- read.table("failures.txt")
failures$V1
m <- 50
mu_est <- mean(failures$V1)
mu_est
(p_est <- mean(failures$V1) / m)
median_cint(failures$V1, conf_level = 0.95)
